import sys
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QStackedWidget, QWidget, QVBoxLayout, QLabel,
    QLineEdit, QPushButton, QComboBox, QDateEdit, QTimeEdit, QSpinBox, QTextEdit
)
from PyQt6.QtCore import Qt, QDate, QTime
from PyQt6.QtGui import QColor, QPalette, QFont


class CakeOrderApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Система заказа тортов")
        self.setFixedSize(600, 700)

        # Настройка шрифта
        font = QFont("Arial", 11)
        QApplication.setFont(font)

        # Цветовая схема (фиолетовый фон + зеленые кнопки)
        palette = self.palette()
        palette.setColor(QPalette.ColorRole.Window, QColor(102, 51, 153))  # Темно-фиолетовый фон
        palette.setColor(QPalette.ColorRole.WindowText, QColor(255, 255, 255))  # Белый текст
        palette.setColor(QPalette.ColorRole.Button, QColor(76, 187, 23))  # Зеленые кнопки
        palette.setColor(QPalette.ColorRole.ButtonText, QColor(255, 255, 255))  # Белый текст кнопок
        palette.setColor(QPalette.ColorRole.Base, QColor(255, 255, 255))  # Белый фон полей ввода
        self.setPalette(palette)

        # Основной виджет со страницами
        self.stacked_widget = QStackedWidget()
        self.setCentralWidget(self.stacked_widget)

        # Инициализация страниц
        self.init_client_info_page()
        self.init_order_details_page()
        self.init_cake_selection_page()
        self.init_confirmation_page()
        self.init_summary_page()

        # Показ первой страницы
        self.stacked_widget.setCurrentIndex(0)

    def create_rounded_edit(self, placeholder=""):
        """Создает закругленное поле ввода"""
        edit = QLineEdit()
        edit.setPlaceholderText(placeholder)
        edit.setStyleSheet("""
            QLineEdit {
                border: 2px solid #4CBB17;
                border-radius: 12px;
                padding: 8px;
                background: white;
                color: #333;
                font-size: 14px;
            }
            QLineEdit:focus {
                border: 2px solid #3A9D00;
            }
        """)
        return edit

    def create_green_button(self, text):
        """Создает зеленую кнопку с эффектами"""
        button = QPushButton(text)
        button.setStyleSheet("""
            QPushButton {
                background-color: #4CBB17;
                border: none;
                border-radius: 15px;
                padding: 10px;
                min-width: 120px;
                color: white;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #3A9D00;
            }
            QPushButton:pressed {
                background-color: #2E7D00;
            }
        """)
        button.setFixedHeight(45)
        return button

    def init_client_info_page(self):
        """Страница 1: Данные клиента"""
        page = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(20)
        layout.setContentsMargins(40, 40, 40, 40)

        title = QLabel("Введите данные клиента")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("""
            font-size: 20px; 
            font-weight: bold; 
            color: white;
            margin-bottom: 20px;
        """)

        self.name_input = self.create_rounded_edit("Имя")
        self.phone_input = self.create_rounded_edit("Телефон")
        self.address_input = self.create_rounded_edit("Адрес")

        next_btn = self.create_green_button("Далее →")
        next_btn.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(1))

        layout.addWidget(title)
        layout.addWidget(self.name_input)
        layout.addWidget(self.phone_input)
        layout.addWidget(self.address_input)
        layout.addWidget(next_btn)
        layout.addStretch()

        page.setLayout(layout)
        self.stacked_widget.addWidget(page)

    def init_order_details_page(self):
        """Страница 2: Детали заказа"""
        page = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(20)
        layout.setContentsMargins(40, 40, 40, 40)

        title = QLabel("Введите данные заказа")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("""
            font-size: 20px; 
            font-weight: bold; 
            color: white;
            margin-bottom: 20px;
        """)

        # Общий стиль для элементов формы
        form_style = """
            QComboBox, QDateEdit, QTimeEdit, QSpinBox {
                border: 2px solid #4CBB17;
                border-radius: 12px;
                padding: 8px;
                background: white;
                color: #333;
                font-size: 14px;
                min-height: 40px;
            }
            QComboBox::drop-down {
                width: 30px;
                border-left: 2px solid #4CBB17;
            }
        """

        # Элементы формы
        self.date_input = QDateEdit()
        self.date_input.setDisplayFormat("yyyy-MM-dd")
        self.date_input.setDate(QDate.currentDate())
        self.date_input.setCalendarPopup(True)
        self.date_input.setStyleSheet(form_style)

        self.time_input = QTimeEdit()
        self.time_input.setDisplayFormat("HH:mm")
        self.time_input.setTime(QTime.currentTime())
        self.time_input.setStyleSheet(form_style)

        self.weight_input = QSpinBox()
        self.weight_input.setRange(1, 50)
        self.weight_input.setSuffix(" кг")
        self.weight_input.setStyleSheet(form_style)

        self.diameter_input = QSpinBox()
        self.diameter_input.setRange(10, 100)
        self.diameter_input.setSuffix(" см")
        self.diameter_input.setStyleSheet(form_style)

        self.color_input = self.create_rounded_edit("Цвет торта")

        # Кнопки навигации
        next_btn = self.create_green_button("Далее →")
        next_btn.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(2))

        back_btn = self.create_green_button("← Назад")
        back_btn.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(0))

        # Добавление элементов
        layout.addWidget(title)
        layout.addWidget(QLabel("Дата заказа"))
        layout.addWidget(self.date_input)
        layout.addWidget(QLabel("Время получения"))
        layout.addWidget(self.time_input)
        layout.addWidget(QLabel("Вес торта"))
        layout.addWidget(self.weight_input)
        layout.addWidget(QLabel("Диаметр/ширина"))
        layout.addWidget(self.diameter_input)
        layout.addWidget(QLabel("Цвет торта"))
        layout.addWidget(self.color_input)
        layout.addWidget(next_btn)
        layout.addWidget(back_btn)
        layout.addStretch()

        page.setLayout(layout)
        self.stacked_widget.addWidget(page)

    def init_cake_selection_page(self):
        """Страница 3: Выбор торта"""
        page = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(20)
        layout.setContentsMargins(40, 40, 40, 40)

        title = QLabel("Выберите торт")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("""
            font-size: 20px; 
            font-weight: bold; 
            color: white;
            margin-bottom: 20px;
        """)

        # Стиль для выпадающих списков
        combo_style = """
            QComboBox {
                border: 2px solid #4CBB17;
                border-radius: 12px;
                padding: 8px;
                background: white;
                color: #333;
                font-size: 14px;
                min-height: 40px;
            }
            QComboBox::drop-down {
                width: 30px;
                border-left: 2px solid #4CBB17;
            }
            QComboBox QAbstractItemView {
                border: 2px solid #4CBB17;
                selection-background-color: #4CBB17;
            }
        """

        # Форма торта
        shape_label = QLabel("Форма:")
        shape_label.setStyleSheet("color: white; font-size: 16px;")
        self.shape_combo = QComboBox()
        self.shape_combo.addItems(["Круг", "Квадрат", "Сердце", "Прямоугольник", "Овал"])
        self.shape_combo.setStyleSheet(combo_style)

        # Вкус торта
        flavor_label = QLabel("Вкус:")
        flavor_label.setStyleSheet("color: white; font-size: 16px;")
        self.flavor_combo = QComboBox()
        self.flavor_combo.addItems(["Ванильный", "Шоколадный", "Клубничный", "Лимонный", "Карамельный"])
        self.flavor_combo.setStyleSheet(combo_style)

        # Кнопки навигации
        next_btn = self.create_green_button("Подтвердить →")
        next_btn.clicked.connect(self.show_confirmation_page)

        back_btn = self.create_green_button("← Назад")
        back_btn.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(1))

        layout.addWidget(title)
        layout.addWidget(shape_label)
        layout.addWidget(self.shape_combo)
        layout.addWidget(flavor_label)
        layout.addWidget(self.flavor_combo)
        layout.addWidget(next_btn)
        layout.addWidget(back_btn)
        layout.addStretch()

        page.setLayout(layout)
        self.stacked_widget.addWidget(page)

    def show_confirmation_page(self):
        """Обновляет и показывает страницу подтверждения"""
        self.update_confirmation_text()
        self.stacked_widget.setCurrentIndex(3)

    def init_confirmation_page(self):
        """Страница 4: Подтверждение заказа"""
        page = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(20)
        layout.setContentsMargins(40, 40, 40, 40)

        title = QLabel("Подтверждение заказа")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("""
            font-size: 20px; 
            font-weight: bold; 
            color: white;
            margin-bottom: 20px;
        """)

        # Текст подтверждения
        self.confirmation_text = QTextEdit()
        self.confirmation_text.setReadOnly(True)
        self.confirmation_text.setStyleSheet("""
            QTextEdit {
                border: 2px solid #4CBB17;
                border-radius: 12px;
                padding: 15px;
                background: white;
                color: #333;
                font-size: 14px;
            }
        """)

        # Кнопки
        confirm_btn = self.create_green_button("Подтвердить заказ")
        confirm_btn.clicked.connect(self.confirm_order)

        back_btn = self.create_green_button("← Назад")
        back_btn.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(2))

        layout.addWidget(title)
        layout.addWidget(self.confirmation_text)
        layout.addWidget(confirm_btn)
        layout.addWidget(back_btn)
        layout.addStretch()

        page.setLayout(layout)
        self.stacked_widget.addWidget(page)

    def update_confirmation_text(self):
        """Обновляет текст подтверждения"""
        text = f"""=== Данные клиента ===
Имя: {self.name_input.text()}
Телефон: {self.phone_input.text()}
Адрес: {self.address_input.text()}

=== Детали заказа ===
Дата: {self.date_input.date().toString("yyyy-MM-dd")}
Время: {self.time_input.time().toString("HH:mm")}
Вес: {self.weight_input.value()} кг
Диаметр: {self.diameter_input.value()} см
Цвет: {self.color_input.text()}

=== Торт ===
Форма: {self.shape_combo.currentText()}
Вкус: {self.flavor_combo.currentText()}"""

        self.confirmation_text.setPlainText(text)

    def confirm_order(self):
        """Подтверждает заказ и показывает итог"""
        self.summary_text.setPlainText(self.confirmation_text.toPlainText())
        self.stacked_widget.setCurrentIndex(4)

    def init_summary_page(self):
        """Страница 5: Итог заказа"""
        page = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(20)
        layout.setContentsMargins(40, 40, 40, 40)

        title = QLabel("Заказ подтвержден!")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("""
            font-size: 22px; 
            font-weight: bold; 
            color: white;
            margin-bottom: 20px;
        """)

        # Текст с деталями заказа
        self.summary_text = QTextEdit()
        self.summary_text.setReadOnly(True)
        self.summary_text.setStyleSheet("""
            QTextEdit {
                border: 2px solid #4CBB17;
                border-radius: 12px;
                padding: 15px;
                background: white;
                color: #333;
                font-size: 14px;
            }
        """)

        # Кнопка нового заказа
        new_order_btn = self.create_green_button("Новый заказ")
        new_order_btn.clicked.connect(self.start_new_order)

        layout.addWidget(title)
        layout.addWidget(self.summary_text)
        layout.addWidget(new_order_btn)
        layout.addStretch()

        page.setLayout(layout)
        self.stacked_widget.addWidget(page)

    def start_new_order(self):
        """Начинает новый заказ"""
        # Сброс всех полей
        self.name_input.clear()
        self.phone_input.clear()
        self.address_input.clear()
        self.date_input.setDate(QDate.currentDate())
        self.time_input.setTime(QTime.currentTime())
        self.weight_input.setValue(1)
        self.diameter_input.setValue(20)
        self.color_input.clear()
        self.shape_combo.setCurrentIndex(0)
        self.flavor_combo.setCurrentIndex(0)

        # Возврат на первую страницу
        self.stacked_widget.setCurrentIndex(0)


if __name__ == "__main__":
    app = QApplication(sys.argv)

    # Установка стиля
    app.setStyle("Fusion")

    window = CakeOrderApp()
    window.show()
    sys.exit(app.exec())
